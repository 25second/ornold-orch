services:
  # 0. Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: ornold_traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Эта команда добавляет автоматический редирект с HTTP на HTTPS
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=your-email@example.com" # ЗАМЕНИ НА СВОЮ ПОЧТУ
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Дашборд Traefik
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"

  # 1. Сервис Redis для Celery и хранения состояния
  redis:
    image: redis:7-alpine
    container_name: ornold_redis
    ports:
      - "6379:6379"

  # 2. Сервер векторной базы данных
  chromadb:
    image: chromadb/chroma:latest
    container_name: ornold_chromadb
    # Порт 8001 больше не публикуется наружу, Traefik будет общаться с ним по внутренней сети
    # ports:
    #   - "8001:8000" 
    volumes:
      - ./chroma_data:/chroma/.chroma/
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
    depends_on:
      - redis

  # 3. API Оркестратора (FastAPI)
  api:
    build: . # Собираем из Dockerfile в текущей директории
    container_name: ornold_api
    # Порт 8000 больше не публикуется наружу, Traefik сам найдет его
    # ports:
    #   - "80:8000" 
    env_file:
      - .env # Подключаем файл с переменными окружения
    depends_on:
      - redis
      - chromadb
    command: uvicorn orchestrator.main:app --host 0.0.0.0 --port 8000 --reload
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ornold-api.rule=Host(`agent.ornold.com`)"
      - "traefik.http.routers.ornold-api.entrypoints=websecure"
      - "traefik.http.routers.ornold-api.tls.certresolver=myresolver"
      - "traefik.http.services.ornold-api.loadbalancer.server.port=8000"

  # 4. Воркер (Celery)
  worker:
    build: . # Используем тот же образ, что и для API
    container_name: ornold_worker
    env_file:
      - .env
    depends_on:
      - redis
      - chromadb
      - api
    command: celery -A worker.celery_app worker --loglevel=info

  flower:
    image: mher/flower:latest
    container_name: ornold_flower
    # Мы должны явно указать приложение (-A) для мониторинга
    command: >
      celery 
      -A worker.celery_app 
      --broker=redis://${REDIS_HOST}:6379/0 
      --result-backend=redis://${REDIS_HOST}:6379/0 
      flower 
      --basic_auth="${FLOWER_USER}:${FLOWER_PASSWORD}"
    env_file:
      - .env
    restart: always
    depends_on:
      - redis
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=Host(`adminka.ornold.com`)"
      - "traefik.http.routers.flower.entrypoints=websecure"
      - "traefik.http.routers.flower.tls.certresolver=myresolver"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"

volumes:
  chroma_data:
  letsencrypt: 